{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Div","styled","theme","padding","spacing","margin","borderRadius","breakpoints","up","marginTop","fontSize","width","height","backgroundColor","App","useState","weather","setweather","cityName","useRef","location","setLocation","submit","setSubmit","useEffect","name","current","value","alert","latitude","longitude","console","log","axios","get","then","res","newWeather","data","navigator","geolocation","getCurrentPosition","position","coords","error","className","main","Grid","container","item","xl","lg","xs","sm","md","TextField","placeholder","color","sx","fullWidth","inputRef","Button","onClick","textAlign","temp","id","opacity","humidity","wind","speed","deg","temp_min","coord","lat","sys","country","temp_max","lon","feels_like","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3cb0710.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect, useRef } from \"react\"\nimport axios from 'axios';\n\nimport { styled } from '@mui/material/styles';\n// import { Form, Button, FormControl, Container, Row, Col } from 'react-bootstrap'\nimport { TextField, Button, Grid, } from '@mui/material';\nimport Item from '@mui/material/Grid'\n// import MenuIcon from '@mui/icons-material/Menu';\n// import { height } from '@mui/system';\n\nconst Div = styled('div')(({ theme }) => ({\n\n  padding: theme.spacing(4),\n  // width: \"60%\",\n  // height: \"300px\",\n  margin: \"auto\",\n  borderRadius: \"50px\",\n  // backgroundAttachment: \"fixed\",\n\n  [theme.breakpoints.up('xs')]: {\n    // backgroundColor: \"pink\",\n    marginTop: \"10%\",\n    fontSize: \"10px\",\n    // marginBottom: \"50px\",\n    width: \"60%\",\n    height: \"500px\",\n    // margin: \"auto\",\n    // marginTop: \"50px\",\n    // height:\"1115px\",\n    //   width: \"400px\",\n    // height: \"900px\",\n    // backgroundAttachment: \"fixed\",\n  },\n\n  [theme.breakpoints.up('sm')]: {\n    backgroundColor: \"red\",\n    width: \"70%\",\n    height: \"600px\",\n    // margin: \"auto\",\n    marginTop: \"20%\",\n    fontSize: \"10px\",\n    // width: \"600px\",\n    // position: \"relative\",\n  },\n\n  [theme.breakpoints.up('md')]: {\n    backgroundColor: \"orange\",\n    // width: \"500px\",\n    // width:\"95.8%\",\n    // height: \"689px\",\n    width: \"80%\",\n    height: \"700px\",\n    marginTop: \"20%\",\n    fontSize: \"14px\",\n\n  },\n\n  [theme.breakpoints.up('lg')]: {\n    // backgroundColor: \"red\",\n    // backgroundColor: \"yellow\",\n    // width: \"1000px\",\n    // width:\"95.8%\",\n    // height: \"689px\",\n    width: \"80%\",\n    height: \"500px\",\n    marginTop: \"5%\",\n    fontSize: \"20px\",\n  },\n\n  [theme.breakpoints.up('xl')]: {\n    backgroundColor: \"green\",\n    // width: \"1000px\",\n    // width:\"95.8%\",\n    // height: \"689px\",\n    // backgroundAttachment: \"fixed\",\n    width: \"85%\",\n    height: \"550px\",\n    marginTop: \"5%\",\n    fontSize: \"20px\",\n  },\n}));\n\nfunction App() {\n  const [weather, setweather] = useState(null)\n\n  // const [cityName, setCityName] = useState(\"karachi\")\n  const cityName = useRef(\"london\");\n\n  const [location, setLocation] = useState(null)\n\n  const [submit, setSubmit] = useState(false)\n\n  useEffect(() => {\n\n    let name = \"\";\n\n    if (cityName.current.value) {\n      name = `q=${cityName.current.value}`\n    }\n    // else if (location) {\n    // if (!location) {\n    // } \n    else if (location === \"fail\") {\n      alert('please turn on your loaction')\n    } else if (location && location.latitude) {\n      name = `lat=${location.latitude}&lon=${location.longitude}`\n    }\n\n    console.log(\"name: \", name)\n    if (name) {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?${name}&&appid=0c702b3dffad340f5e1890bd9eeb5d0f&units=metric`)\n        .then(res => {\n          const newWeather = res.data;\n          // console.log(\"newWeather: \", newWeather);\n          setweather(newWeather);\n        });\n    }\n\n  }, [submit, location]);\n\n  useEffect(() => {\n\n    function getLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          console.log(\"position got: \", position.coords.latitude);\n          // console.log(\"position got: \", position.coords.longitude);\n          setLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          })\n\n        }, function (error) {\n\n          setLocation(\"fail\")\n\n        });\n      } else {\n        console.log(\"Geolocation is not supported by this browser.\");\n      }\n    }\n\n    getLocation()\n\n  }, []);\n  return (\n    <div>\n\n      {/* <h1>City Name:</h1> */}\n      {/* <input onChange={(e) => {\n        console.log(\"e: \", e.target.value)\n        setCityName(e.target.value)\n      }} /> */}\n      {/* <input ref={cityName} />\n      <button onClick={() => {\n        console.log(\"name: \", cityName.current.value)\n        setSubmit(!submit)\n      }} >Submit</button> */}\n      {/* <br /> */}\n      {/* <h1>{weather?.main?.temp}</h1> */}\n\n      {\n        (weather !== null) ?\n          <>\n            <Div className={weather?.weather[0].main}>\n              <Grid container spacing={1}>\n                <Grid item xl={10} lg={10} xs={8} sm={8} md={8}>\n                  <Item><TextField placeholder=\"enter city name\" color=\"primary\" sx={{ backgroundColor: \"lightgray\", color: 'white' }} fullWidth inputRef={cityName} >\n                  </TextField>\n                  </Item>\n                </Grid>\n                <Grid item xl={2} lg={2} xs={4} sm={4} md={4}>\n                  <Item><Button sx={{ height: '55px', width: '90%', backgroundColor: \"lightgray\", color: 'black' }} onClick={() => {\n                    console.log(\"name: \", cityName.current.value)\n                    setSubmit(!submit)\n                  }}>Search</Button>\n                  </Item>\n                </Grid>\n              </Grid>\n              {/* <input ref={cityName} />\n      <button onClick={() => {\n        console.log(\"name: \", cityName.current.value)\n        setSubmit(!submit)\n      }} >Submit</button> */}\n              <br />\n              <Grid container spacing={2}>\n                <Grid item xl={12} lg={12} xs={12} sm={12} md={12}>\n                  <Item sx={{ textAlign: \"center\", }}><h1 >{weather.name}</h1>\n                    <h2 >{weather?.weather[0].main}</h2>\n                    <h1  >{weather?.main?.temp} <span id=\"degree\">°C</span></h1>\n                  </Item>\n                </Grid>\n              </Grid>\n              <Grid container spacing={0} sx={{ backgroundColor: \"black\", opacity: \"0.3\", color: \"white\", padding: \"2px\" }}>\n                <Grid item xl={4} lg={4} xs={4} sm={4} md={4}>\n                  <Item sx={{ textAlign: \"center\", }}>\n                    <h4 >Humidity: {weather?.main?.humidity} g/kg</h4>\n                    <h4 >Wind Speed: {weather?.wind.speed} m/s</h4>\n                    <h4 >Wind Direction : {weather.wind.deg} °</h4>\n                  </Item>\n                </Grid>\n                <Grid item xl={4} lg={4} xs={4} sm={4} md={4}>\n                  <Item sx={{ textAlign: \"center\", }}><h4 >Min Temperature : {weather.main.temp_min}°C</h4>\n                    <h4 > Latitude: {weather.coord.lat}</h4>\n                    <h4 > Country : {weather.sys.country}</h4>\n                  </Item>\n                </Grid>\n                <Grid item xl={4} lg={4} xs={4} sm={4} md={4}>\n                  <Item sx={{ textAlign: \"center\", }}><h4 >Max Temperature : {weather.main.temp_max}°C</h4>\n                    <h4 >Longitude: {weather.coord.lon}</h4>\n                    <h4 >Feels Like : {weather.main.feels_like}°C</h4>\n                  </Item>\n                </Grid>\n              </Grid>\n            </Div>\n          </>\n          :\n          <center>\n            <h1>Loading...</h1>\n          </center>\n      }\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}